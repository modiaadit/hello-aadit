#include "cell_modem.h"
#include <cctype>

// on powerup, 0 = boot mode, 1 = normal boot
DigitalOut  mdm_uart2_rx_boot_mode_sel(PTC17);
// 0 = turn modem on, 1 = turn modem off (should be held high for >5 seconds to cycle modem)
DigitalOut  mdm_power_on(PTB9);
// 0 = let modem sleep, 1 = keep modem awake -- Note: pulled high on shield
DigitalOut  mdm_wakeup_in(PTC2);
// active high
DigitalOut  mdm_reset(PTC12);
// 0 = disabled (all signals high impedence, 1 = translation active
DigitalOut  shield_3v3_1v8_sig_trans_ena(PTC4);
DigitalOut  mdm_uart1_cts(PTD0);

using namespace comTech::locationFix;

/**
 * parameter declaration for cell_M14a2a
  */

cell_M14a2a::cell_M14a2a() {
    radioType = config::radioType;
    mcc = -1;
    mnc = -1;
    cellId = -1;
    lac = -1;
    payloadLength = 0;
};

cell_M14a2a::cell_M14a2a(PinName tx, PinName rx, int txSize, int rxSize, unsigned int baud, const char* name) {
    cell_serial = new MODSERIAL(tx, rx, txSize, rxSize, name);
    baudRate = baud;

    radioType = config::radioType;
    mcc = -1;
    mnc = -1;
    cellId = -1;
    lac = -1;
    payloadLength = 0;
};

/**
 * setting up parameters for debug_serial
 */
int cell_M14a2a::setDebugSerial(MODSERIAL *serialName) {
    debug_serial = serialName;
}

/**
 * Cell initilization and priting the message follwed by modem initialize
 * Counting the seconds from 1 to 60 to initialize the modem
 */

int cell_M14a2a::initialize() {
    debug_serial->printf("Welcome to \"Where in the World\"!\n\n");
    int i;
     // Initialize the modem
    debug_serial->printf("Modem initializing... Can take up to 60 seconds\r\n");
    do {
        i = initRoutine();
        if (!i) {
            debug_serial->printf("Modem initialization failed!\n");
        }
    } while (!i);

    return 0;
}

bool cell_M14a2a::initRoutine(void) {
    // Hard reset the modem (doesn't go through the signal level translator)
    mdm_reset = 0;

    // disable signal level translator (necessary
    // for the modem to boot properly).  All signals
    // except mdm_reset go through the level translator
    // and have internal pull-up/down in the module. While
    // the level translator is disabled, these pins will
    // be in the correct state.
    shield_3v3_1v8_sig_trans_ena = 0;

    // While the level translator is disabled and ouptut pins
    // are tristated, make sure the inputs are in the same state
    // as the WNC Module pins so that when the level translator is
    // enabled, there are no differences.
    mdm_uart2_rx_boot_mode_sel = 1;   // UART2_RX should be high
    mdm_power_on = 0;                 // powr_on should be low
    mdm_wakeup_in = 1;                // wake-up should be high
    mdm_uart1_cts = 0;                // indicate that it is ok to send

   // Now, wait for the WNC Module to perform its initial boot correctly
    wait(1.0);

    // The WNC module initializes comms at 115200 8N1 so set it up
    cell_serial->baud(baudRate);

    //Now, enable the level translator, the input pins should now be the
    //same as how the M14A module is driving them with internal pull ups/downs.
    //When enabled, there will be no changes in these 4 pins...
    shield_3v3_1v8_sig_trans_ena = 1;

    // Now, give the modem 60 seconds to start responding by
    // sending simple 'AT' commands to modem once per second.
    Timer timer;
    timer.start();
    while (timer.read() < 60) {
        const char * rsp_lst[] = { "OK", "ERROR", NULL };
        if(isOnline(1)) {
            return true;
        }
        wait_ms(1000 - (timer.read_ms() % 1000));
        debug_serial->printf("\r%d",timer.read_ms()/1000);
    }
    return false;
}

/**
 * Sending the AT command when cell_M14a2a is online
 * Debugging the cellular shield with print message
 */

bool cell_M14a2a::isOnline(int type) {
    string *response;

    int cmdRes = sendATCommandNew("AT", &response, 500);
    if(!type) {
      printHeader("Alerting the Cellular Shield","");
      printResponse(*response);
    }

    int idx = response->find("OK", 1);
    if(idx != std::string::npos){
      return true;
    }
    else {
      return false;
    }
}

void cell_M14a2a::updateCellularInformation() {
    updateProviderInformation();
    updateNetworkInformation();
}

/**
 * Debugging the binary payload values
 */

string cell_M14a2a::getBinaryPayload() {
    printHeader("Generating Binary Payload...", "");
    encodeData(0);
    resetCellInfo();

    return getHexToByteString();
}
/**
 * reseting the cellular Information
 */

void cell_M14a2a::resetCellInfo() {
    mcc = -1;
    mnc = -1;
    cellId = -1;
    lac = -1;
}

int cell_M14a2a::encodeData(char flags) {
    //16 bytes ECGI + 4 bytes CID +
    //2 bytes MCC + 2 bytes MNC + 2 bytes LAC +
    //1 byte radioType + 1 byte flag
    payload = new char[12];
    char* p = payload;
    flags |=  4;//RSS_VALID = 2

    //Encode flags
    *p = flags;
    p++;

    *p = radioType;
    p++;

    *p = getMNCLength();
    p++;

    char ch;
    //MCC
    ch = mcc & 0xFF;
    *p = ch;    p++;
    ch = (mcc >> 8) & 0xFF;
    *p = ch;    p++;

    //MNC
    ch = mnc & 0xFF;
    *p = ch;    p++;
    ch = (mnc >> 8) & 0xFF;
    *p = ch;    p++;

    //LAC
    ch = lac & 0xFF;
    *p = ch;    p++;
    ch = (lac >> 8) & 0xFF;
    *p = ch;    p++;

    //Cell_ID
    ch = cellId & 0xFF;
    *p = ch;    p++;
    ch = (cellId >> 8)  & 0xFF;
    *p = ch;    p++;
    ch = (cellId >> 16) & 0xFF;
    *p = ch;    p++;
    ch = (cellId >> 24) & 0xFF;
    *p = ch;    p++;

    // for(int i = 0; i < 16; ++i){
    //     *p = 0;
    //     p++;
    // }

    payloadLength = p - payload;
    return p - payload;;
}

unsigned int cell_M14a2a::getMNCLength() {
    unsigned int val = mnc;
    unsigned int count = 0;
    while (val != 0) {
       ++count;
       val = val/10;
    }
    // debug_serial->printf("\nlength_mnc = %d\n",count);
    return count;
}

/**
 * Calling the string to get the hex to byte value
 */

string cell_M14a2a::getHexToByteString() {
    std::stringstream buffer;

    for (int i = 0; i < payloadLength; ++i)
    {
        // PRINTF("%02x",payload[i]);
        buffer << std::hex << std::setfill('0');
        buffer << std::setw(2)  << static_cast<unsigned>(payload[i]);
    }

    delete payload;

    printResponse(buffer.str());
    return buffer.str();
}

/**
 * updating the provider information with MCC, MNC values and individualy fetching them
 * Sending the AT+COPS command to get the response
  */

void cell_M14a2a::updateProviderInformation() {
    string *response;
    printHeader("Getting MCC and MNC Information","");
    debug_serial->printf("Fetching...");

    while(!isValidProvider()) {
        debug_serial->printf(".");
        int cmdRes = sendATCommandNew("AT+COPS?", &response, 10000);
        parseCellProviderInfo(response);
    }
    printResponse(*response);

    printHeader("Parsing the MCC and MNC Information", "");
    char providerInfo[30];
    sprintf(providerInfo, "MCC: %d  |  MNC: %d", mcc, mnc);
    printResponse(providerInfo);
}

bool cell_M14a2a::isValidProvider() {
    return (mcc == -1 && mnc == -1) ? false : true;
}

void cell_M14a2a::parseCellProviderInfo(string* response) {
    size_t startPtr = 15;//AT+COPS?+COPS:
    size_t endPtr = response->find(",", startPtr);
    string val = response->substr(startPtr, endPtr - startPtr);

    startPtr = endPtr + 1;
    endPtr = response->find(",", startPtr);
    val = response->substr(startPtr, endPtr - startPtr);

    startPtr = endPtr + 1;
    endPtr = response->find(",", startPtr);
    val = response->substr(startPtr + 1, endPtr - startPtr - 2);

    const string provider_list[] =  {"AT&T"};
    int provider_length = 1;
    int idx = -1;
    for(int i = 0; i < provider_length; ++i){
        if(val.compare(provider_list[i]) == 0){
            debug_serial->printf("Found Provider: %s\n", val.c_str());
            idx = i;
            break;
        }
    }
    switch (idx){
        case 0:
            mcc = 310;
            mnc = 410;
            break;
        default:
            break;
    }
}

/**
 * updating the network information with the new values of cell-id and LAC and fetching them
 * Sending the AT+CREG? command and getting the response
 */

void cell_M14a2a::updateNetworkInformation() {
    string *response;
    printHeader("Getting Cell-ID and LAC Information","");
    debug_serial->printf("Fetching");

    while(!isValidNetwork()) {
        debug_serial->printf(".");
        int cmdRes = sendATCommandNew("AT+CREG?", &response, 10000);
        parseCellNetworkInfo(response);
    }
    printResponse(*response);

    printHeader("Parsing the Cell-ID and LAC Information", "");
    char networkInfo[40];
    sprintf(networkInfo, "CellId: %d  |  LAC: %d", cellId, lac);
    printResponse(networkInfo);
}

bool cell_M14a2a::isValidNetwork() {
    return (lac == -1 && cellId == -1) ? false : true;
}

void cell_M14a2a::parseCellNetworkInfo(string *response) {
    size_t startPtr = 15;//AT+CREG?+CREG:
    size_t endPtr = response->find(",", startPtr);
    string val = response->substr(startPtr, endPtr - startPtr);

    startPtr = endPtr + 1;
    endPtr = response->find(",", startPtr);
    val = response->substr(startPtr, endPtr - startPtr);

    startPtr = endPtr + 1;
    endPtr = response->find(",", startPtr);
    val = response->substr(startPtr, endPtr - startPtr);
    lac = convertHexToDecimal(val);

    startPtr = endPtr + 1;
    endPtr = response->find(",", startPtr);
    val = response->substr(startPtr, endPtr - startPtr);
    cellId = convertHexToDecimal(val);
    debug_serial->printf("Found network Info\n");

    startPtr = endPtr + 1;
    endPtr = response->length() - 3;
    val = response->substr(startPtr, endPtr - startPtr);
}

/**
 * Converting the input string hex value to decimal
 */

long cell_M14a2a::convertHexToDecimal(string input) {
    long res = -1;
    char *in = new char[input.length()+1];
    in[input.length()] = '\0';
    for(int i = 0; i < input.length()+1; ++i){
        in[i] = input[i];
    }

    char *pos = in;
    res = strtol(pos, &pos, 16);

    return res;
}

// Contains the RAW WNC UART responses
static string wncStr;

int cell_M14a2a::sendATCommandNew(const char *s, string **r, int ms_timeout) {
  static const char * rsp_lst[] = { "OK", "ERROR","@EXTERR", "+CME", NULL };
  int len;

  int res = getATCommandResponse(s, rsp_lst, ms_timeout, &wncStr, &len);
  // debug_serial->printf("Got Response : %d\n", res);
  *r = &wncStr;   // Return a pointer to the static string

  if (res >= 0)
  {
       if (res == 0) {
          /* OK */
          return 0;
      } else if (res == 2) {
          /* @EXTERR */
          debug_serial->printf("@EXTERR and res = %d \r\n", res);
          return -3;
      } else
          return -1;
  }
  else
  {
      debug_serial->puts("No response from WNC!\n\r");
      return -2;
  }
}

int cell_M14a2a::getATCommandResponse(const char *cmd, const char **rsp_list, int timeout_ms, string * rsp, int * len) {
    static char cmd_buf[3200];  // Need enough room for the WNC sockreads (over 3000 chars)
    size_t n = strlen(cmd);

    // Per WNC wait:
    wait_ms(40);

    if (cmd && n > 0) {
        while (n--) {
            cell_serial->putc(*cmd++);
            wait_us(1000);
        };
        cell_serial->putc('\r');
        wait_us(1000);
        cell_serial->putc('\n');
        wait_us(1000);
    }

    if (rsp_list) {
        rsp->erase(); // Clean up from prior cmd response
        *len = 0;
        Timer   timer;
        timer.start();
        while (timer.read_ms() < timeout_ms) {
            int lenCmd = getline(cmd_buf, sizeof(cmd_buf), timeout_ms - timer.read_ms());

            if (lenCmd == 0)
                continue;

            if (lenCmd < 0){
                return MDM_ERR_TIMEOUT;
            }
            else {
                *len += lenCmd;
                *rsp += cmd_buf;
            }

            int rsp_idx = 0;
            // TODO: Test if @EXTERR:<code>
            while (rsp_list[rsp_idx]) {
                if (strcasecmp(cmd_buf, rsp_list[rsp_idx]) == 0) {
                    // debug_serial->printf("cmd_buf == rsp_list\n");
                    return rsp_idx;
                }
                else if (strncmp(cmd_buf, "@EXTERR", 7) == 0){
                    // debug_serial->printf("----- We got EXTERR ---\r\n");
                    return 2;
                }
                else if (strncmp(cmd_buf, "+CME", 4) == 0){
                    // debug_serial->printf("+CME Error\n");
                    return 3;
                }
                rsp_idx++;
            }
        }
        return MDM_ERR_TIMEOUT;
    }
    return MDM_OK;
}

/**
 * invoking and starting the timer
 * char *style
 */

ssize_t cell_M14a2a::getline(char *buff, size_t size, int timeout_ms) {
    int cin = -1;
    int cin_last;

    if (NULL == buff || size == 0) {
        return -1;
    }

    size_t len = 0;
    Timer timer;
    timer.start();
    while ((len < (size-1)) && (timer.read_ms() < timeout_ms)) {
        if (cell_serial->readable()) {
            cin_last = cin;
            cin = cell_serial->getc();
            if (isprint(cin)) {
                buff[len++] = (char)cin;
                continue;
            } else if (('\r' == cin_last) && ('\n' == cin)) {
                break;
            }
        }
    }
    buff[len] = (char)NULL;

    return len;
}

/**
 * sending the AT%PDNSET=1 command for connection to APN and setting up PDN
 */

bool cell_M14a2a::restCallPreset() {
    string *response = NULL;

    printHeader("Connecting to APN and setting up PDN","");
    // string APN = "m2m.com.attz";
    string cmd_str("AT%PDNSET=1,");
    cmd_str += config::APN;
    cmd_str += ",IP";

    debug_serial->printf("Connecting...");
    int cmdRes = sendATCommandNew(cmd_str.c_str(), &response, 10000);
    while (cmdRes != 0) {
        cmdRes = sendATCommandNew(cmd_str.c_str(), &response, 10000);
        debug_serial->printf(".");
    }
    debug_serial->printf("Connected to APN!\n");
    printResponse(*response);

    printHeader("Connecting to Internet","");
    debug_serial->printf("Checking internet access...");
    cmdRes = sendATCommandNew("AT@INTERNET=1", &response, 10000);
    while (cmdRes != 0) {
        cmdRes = sendATCommandNew("AT@INTERNET=1", &response, 10000);
        debug_serial->printf(".");
    }

    debug_serial->printf("Connected to Internet!\n");
    printResponse(*response);

    return isConnectedToHost();
}

bool cell_M14a2a::isConnectedToHost() {
  string *response = NULL;
  printHeader("Connecting to  Host:","");
  debug_serial->printf("Connecting...");

  // string HOSTNAME = "iot-gw.nimaws.com";
  string cmd_str("AT@DNSRESVDON=\"");
  cmd_str += config::HOSTNAME;
  cmd_str += "\"";

  int cmdRes = sendATCommandNew(cmd_str.c_str(), &response, 10000);
  while(cmdRes != 0){
      cmdRes = sendATCommandNew(cmd_str.c_str(), &response, 10000);
      debug_serial->printf(".");
  }
  IPAddress = parseIPAddr(response);
  debug_serial->printf("HOST IP Address is: %s\n", IPAddress.c_str());

  printResponse(*response);

  return true;
}

/**
 * making the reset call by passing input string payload
 * debugging the socket request with print statements
 */


void cell_M14a2a::makeRestCall(string payload) {

    if(createSocketConnection()) {
        char *modem_string = new char[512];
        generateRequestString(modem_string, payload);

        printHeader("Writing Request to Socket","");
        writeDataToSocket(&modem_string[0]);
        printResponse("Successfully wrote bytes to socket.");
    }
}

/**
 * getting and reading the reset response
 */

string cell_M14a2a::getRestResponse() {
    string res;
    unsigned int resp = readSocketResponse(&res, 1024, 20);
    printHeader("Reading Server Response", "");
    printResponse(res);

    string *response;
    printHeader("Closing the Socket Connection", "");
    debug_serial->printf("Closing...");
    int cmdRes = sendATCommandNew("AT@SOCKCLOSE=1", &response, 500);
    while(cmdRes != 0){
        cmdRes = sendATCommandNew("AT@SOCKCLOSE=1", &response, 500);
        debug_serial->printf(".");
    }
    debug_serial->printf("Closed!\n");
    printResponse(*response);

    return res;
}

/**
 * writing the data to the Socket
 */

void cell_M14a2a::writeDataToSocket(const char * s) {
    string * pRespStr;
    char num2str[6];
    size_t sLen = strlen(s);
    int res;
    if (sLen <= 1500)
    {
        string cmd_str("AT@SOCKWRITE=1,");
        itoa(sLen, num2str, 10);
        cmd_str += num2str;
        cmd_str += ",\"";
        while(*s != '\0')
        {
            itoa((int)*s++, num2str, 16);
            // Always 2-digit ascii hex:
            if (strlen(num2str) == 1)
            {
                num2str[2] = '\0';
                num2str[1] = num2str[0];
                num2str[0] = '0';
            }
            cmd_str += num2str;
        }
        cmd_str += "\"";
        res = sendATCommandNew(cmd_str.c_str(), &pRespStr, 120000);
        if (res == -3)
            debug_serial->puts("sockwrite is disconnect \r\n");
    }
    else
        debug_serial->puts("sockwrite Err, string to long\r\n");
}

/**
 * reading the socket response
 */

unsigned cell_M14a2a::readSocketResponse(string * pS, unsigned n, unsigned retries) {
    unsigned i, numBytes = 0;
    string * pRespStr;
    string cmd_str("AT@SOCKREAD=1,");

    // Clean slate
    pS->erase();

    if (n <= 1500)
    {
        char num2str[6];

        itoa(n, num2str, 10);
        cmd_str += num2str;
        retries += 1;
        while (retries--)
        {
            // Assuming someone is sending then calling this to receive response, invoke
            // a pause to give the response some time to come back and then also
            // between each retry.
            wait_ms(10);

            if (sendATCommandNew(cmd_str.c_str(), &pRespStr, 10000) == 0)
            {
                size_t pos_start = pRespStr->find("\"")  + 1;
                size_t pos_end   = pRespStr->rfind("\"") - 1;

                // Make sure search finds what it's looking for!
                if (pos_start != string::npos && pos_end != string::npos)
                    i = (pos_end - pos_start + 1);  // Num hex chars, 2 per byte
                else
                    i = 0;

                if (i > 0)
                {
                    retries = 1;  // If any data found retry 1 more time to catch data that might be in another
                    //  WNC payload
                    string byte;
                    while (pos_start < pos_end)
                    {
                        byte = pRespStr->substr(pos_start, 2);
                        *pS += (char)strtol(byte.c_str(), NULL, 16);
                        pos_start += 2;
                    }
                    numBytes += i/2;
                }
            }
            else
            {
                debug_serial->puts("no readsock reply!\r\n");
                return (0);
            }
        }
    }
    else
        debug_serial->puts("sockread Err, to many to read\r\n");

    return (numBytes);
}

/**
 * C++ version 0.4 char* style "itoa":
 * Written by Lukas Chmela
 * Released under GPLv3.
 */

char* cell_M14a2a::itoa(int value, char* result, int base) {
    // check that the base if valid
    if ( base < 2 || base > 36 ) {
        *result = '\0';
        return result;
    }

    char* ptr = result, *ptr1 = result, tmp_char;
    int tmp_value;

    do {
        tmp_value = value;
        value /= base;
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - value * base)];
    } while ( value );

    // Apply negative sign
    if ( tmp_value < 0 )
        *ptr++ = '-';
    *ptr-- = '\0';

    while ( ptr1 < ptr ) {
        tmp_char = *ptr;
        *ptr-- = *ptr1;
        *ptr1++ = tmp_char;
    }

    return result;
}

/**
 * creating the socket connection by sending the AT command
 */

bool cell_M14a2a::createSocketConnection() {
    string *response = NULL;
    printHeader("Creating a Socket Connection","");

    int cmdRes = sendATCommandNew("AT@SOCKDIAL=1", &response, 10000);
    debug_serial->printf("Dialing...");
    while (cmdRes != 0) {
        cmdRes = sendATCommandNew("AT@SOCKDIAL=1", &response, 10000);
        debug_serial->printf(".");
    }
    debug_serial->printf("Success!\n");
    printResponse(*response);

    cmdRes = sendATCommandNew("AT@SOCKCREAT=1", &response, 10000);
    while (cmdRes != 0) {
        cmdRes = sendATCommandNew("AT@SOCKCREAT=1", &response, 10000);
        debug_serial->printf(".");
    }
    printResponse(*response);

    // string IP_PORT = "80";
    string sock_str("AT@SOCKCONN=1,\"");
    sock_str += IPAddress;
    sock_str += "\",";
    sock_str += config::IP_PORT;
    sock_str += ",30";

    cmdRes = sendATCommandNew(sock_str.c_str(), &response, 10000);
    while (cmdRes != 0) {
        cmdRes = sendATCommandNew(sock_str.c_str(), &response, 10000);
        debug_serial->printf(".");
    }
    printResponse(*response);

    return true;
}

void cell_M14a2a::generateRequestString(char *modem_string, string requestString) {
  string *response = NULL;
  printHeader("Generating GET Request URL String", "");

  // string BASE_URL = "/v1/ObsSubmission/Submit/mBed";
  // string DEVICE_ID = "CTILP-MBED-0002";
  // string PAYLOAD = "0207f4cfe2f84c8335f4cfe2f84c8236f4cfe2f84ea244f4cfe2f84ea34574a2e6ca30534f74a2e6ca30524f74a2e6ca2f3259";
  // string URL_TYPE = "HTTP/1.1\r\nHost: ";
  // string SERVER_URL = "iot-gw.nimaws.com";
  sprintf(modem_string, "GET %s?idDevice=%s&pld=%s %s%s\r\n\r\n",
    config::BASE_URL.c_str(), config::DEVICE_ID.c_str(), requestString.c_str() ,
    config::URL_TYPE.c_str(), config::HOSTNAME.c_str());

  debug_serial->printf(modem_string);

}

/**
 * parsing the IP Address
 * string *style
 */

string cell_M14a2a::parseIPAddr(string *response) {
    size_t startPtr = response->find(":\"") + 2;
    size_t endPtr = response->find("\"", startPtr) - 1;
    string ipStr = response->substr(startPtr, endPtr - startPtr + 1);

    return ipStr;
}


/**
 * printing the header string response
 */

void cell_M14a2a::printHeader(string line1, string line2) {
    debug_serial->printf(config::headerBoundaryTop.c_str());
    debug_serial->printf(line1.c_str());
    if(line2.length() > 0){
        debug_serial->printf("\n");
    }
    debug_serial->printf(line2.c_str());
    debug_serial->printf(config::headerBoundaryBottom.c_str());
}

void cell_M14a2a::printResponse(string response) {
    debug_serial->printf("\nResponse:\n %s\r\n",response.c_str());
    if(response.length() > 0) {
        printFooter();
    }
    else {
        printFooter(config::footerError.c_str());
    }
}


/**
 * printing the footer string response
 */

void cell_M14a2a::printFooter(string line) {
    if(line.length() > 0){
        debug_serial->printf(line.c_str());
    }
    else {
        debug_serial->printf(config::footerDefault.c_str());
    }
}
